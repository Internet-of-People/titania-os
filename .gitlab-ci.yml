image: gmacario/build-yocto

variables:
  GIT_SUBMODULE_STRATEGY: 'recursive'
  GIT_SSL_NO_VERIFY: 'true'
  BITBAKEDIR: '$CI_PROJECT_DIR/bitbake'
  IMAGE_DIR: '$CI_PROJECT_DIR/build/tmp-glibc/deploy/images'
  VERSION: 'git describe --long'
  SHA_HASH: 'git rev-parse HEAD'

stages:
  - setup
  - build

#
# Jobs below
#

bitbake:
  stage: setup
  script:
    - source openembedded-core/oe-init-build-env

    # Should be available early with the new bitbake 1.38 since it parses everything immediately
    # when adding a layer and would break on ux-titania & friends otherwise
    - echo 'LIBERTARIA_GIT_ORIGIN = "'${LIBERTARIA_GIT_ORIGIN}'"' >> ./conf/local.conf

    # meta-virtualisation complains when 'virtualization' DISTRO_FEATURE is not set
    # Suppressing the warning because we only want container stuff
    - echo 'SKIP_META_VIRT_SANITY_CHECK = "1"' >> ./conf/local.conf

    # # Add the layers
    - bitbake-layers add-layer ../meta-raspberrypi
      ../meta-oe/meta-oe
      ../meta-oe/meta-python
      ../meta-oe/meta-filesystems
      ../meta-oe/meta-networking
      ../meta-oe/meta-python
      ../meta-go
      ../meta-virtualization
      ../meta-swupdate
      ../meta-titania

    # Making sure config locations point where we want them to
    - echo 'SSTATE_DIR = "${TOPDIR}/sstate-cache"' >> ./conf/local.conf
    - echo 'DL_DIR = "${TOPDIR}/downloads"' >> ./conf/local.conf
    - echo 'TMPDIR = "${TOPDIR}/tmp"' >> ./conf/local.conf
    - echo 'DISTRO = "titania"' >> ./conf/local.conf
    - echo 'BUILD_ID = "'$(eval $SHA_HASH)'"' >> ./conf/local.conf
  artifacts:
    paths:
      - build
    expire_in: 14 days

x86:
  stage: build
  script:
    # Adding the SSH key
    - eval $(ssh-agent)
    - echo $SSH_KEY_B64 | base64 -d | ssh-add -
    # Ensure we have the host key
    - mkdir -p ~/.ssh
    - echo $SSH_HOST_KEY_B64 | base64 -d >> ~/.ssh/known_hosts
    - source openembedded-core/oe-init-build-env
    - MACHINE="qemux86-64" bitbake -C install dapp
    - MACHINE="qemux86-64" bitbake x86-titania-image
    - cp -H $IMAGE_DIR/qemux86-64/x86-titania-image-qemux86-64.wic.gz $CI_PROJECT_DIR/titania-x86-$(eval $VERSION).img.gz

  cache:
    key: "x86-$CI_COMMIT_REF_SLUG"
    paths:
      - build/sstate-cache

  cache:
    key: "downloaded-files"
    paths:
      - build/downloads

  artifacts:
    paths:
      - titania-x86-*.img.gz
    expire_in: 3 days

raspberry:
  stage: build

  script:
    # Adding the SSH key
    - eval $(ssh-agent)
    - echo $SSH_KEY_B64 | base64 -d | ssh-add -
    # Ensure we have the host key
    - mkdir ~/.ssh || true
    - echo $SSH_HOST_KEY_B64 | base64 -d >> ~/.ssh/known_hosts
    - source openembedded-core/oe-init-build-env
    # Force rebuild for Docker
    - MACHINE="raspberrypi3" bitbake -C install dapp
    - MACHINE="raspberrypi3" bitbake rpi-titania-image
    - MACHINE="raspberrypi3" bitbake rpi-titania-update
    - cp -H $IMAGE_DIR/raspberrypi3/rpi-titania-image-raspberrypi3.wic.gz $CI_PROJECT_DIR/titania-arm-rpi-$(eval $VERSION).img.gz
    - cp -H $IMAGE_DIR/raspberrypi3/rpi-titania-update-raspberrypi3.swu $CI_PROJECT_DIR/titania-arm-rpi-$(eval $VERSION).swu
    # Debug image
    - MACHINE="raspberrypi3" bitbake rpi-titania-image-debug
    - cp -H $IMAGE_DIR/raspberrypi3/rpi-titania-image-debug-raspberrypi3.wic.gz $CI_PROJECT_DIR/titania-arm-rpi-$(eval $VERSION)-dbg.img.gz

  cache:
    key: "rpi-$CI_COMMIT_REF_SLUG"
    paths:
      - build/sstate-cache

  cache:
    key: "downloaded-files"
    paths:
      - build/downloads

  artifacts:
    paths:
      - titania-arm-rpi-*.img.gz
      - titania-arm-rpi-*.swu
    expire_in: 3 days

# TODO: add GPG signature
