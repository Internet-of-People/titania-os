image: gmacario/build-yocto

# TODO: remove the SSL variable afterwards
variables:
  GIT_SUBMODULE_STRATEGY: 'recursive'
  GIT_SSL_NO_VERIFY: 'true'
  BITBAKEDIR: '$CI_PROJECT_DIR/bitbake'
  IMAGE_DIR: '$CI_PROJECT_DIR/build/tmp-glibc/deploy/images'
  VERSION: 'git describe --long'
  SHA_HASH: 'git rev-parse HEAD'

# TODO:
# add stages:
# - build 2 versions in parallel (ARM and x86-64)
# - run a VM and security scan
# - deploy the image somewhere
stages:
  - setup
  - build
  # - sign
  # - publish 

bitbake:
  stage: setup
  script:
    - source openembedded-core/oe-init-build-env
    # # Add the layers
    - bitbake-layers add-layer ../meta-raspberrypi
    - bitbake-layers add-layer ../meta-oe/meta-oe
    - bitbake-layers add-layer ../meta-oe/meta-python
    - bitbake-layers add-layer ../meta-oe/meta-filesystems
    - bitbake-layers add-layer ../meta-oe/meta-networking
    - bitbake-layers add-layer ../meta-oe/meta-python
    - bitbake-layers add-layer ../meta-go
    - bitbake-layers add-layer ../meta-virtualization
    - bitbake-layers add-layer ../meta-swupdate
    - bitbake-layers add-layer ../meta-titania

    # Making sure config locations point where we want them to
    - echo 'SSTATE_DIR = "${TOPDIR}/sstate-cache"' >> ./conf/local.conf
    - echo 'DL_DIR = "${TOPDIR}/downloads"' >> ./conf/local.conf
    - echo 'TMPDIR = "${TOPDIR}/tmp"' >> ./conf/local.conf
    - echo 'DISTRO = "titania"' >> ./conf/local.conf
    - echo 'BUILD_ID = "'$(eval $SHA_HASH)'"' >> ./conf/local.conf
    - echo 'LIBERTARIA_GIT_ORIGIN = "'${LIBERTARIA_GIT_ORIGIN}'"' >> ./conf/local.conf
  artifacts:
    paths:
      - build
    expire_in: 14 days

# TODO: use Titania image classes here
# TODO: make new branches start out with fresh cache
raspberry:
  stage: build
  script:
    # Adding the SSH key TODO remove after we go public
    - eval $(ssh-agent)
    - echo $SSH_KEY_B64 | base64 -d | ssh-add -
    # Ensure we have the host key
    - mkdir ~/.ssh || true
    - echo $SSH_HOST_KEY_B64 | base64 -d >> ~/.ssh/known_hosts
    - source openembedded-core/oe-init-build-env
    # Force rebuild for Docker NOTE: this produces a warning message later on
    - MACHINE="raspberrypi3" bitbake -C install dapp
    # Update image, the full SD image is pulled as a dependency
    - MACHINE="raspberrypi3" bitbake rpi-titania-update
    - cp -H $IMAGE_DIR/raspberrypi3/rpi-titania-image-raspberrypi3.rpi-sdimg.gz $CI_PROJECT_DIR/titania-arm-rpi-$(eval $VERSION).img.gz
    - cp -H $IMAGE_DIR/raspberrypi3/rpi-titania-update-raspberrypi3.swu $CI_PROJECT_DIR/titania-arm-rpi-$(eval $VERSION).swu
    # Debug image
    - MACHINE="raspberrypi3" bitbake rpi-titania-image-debug
    - cp -H $IMAGE_DIR/raspberrypi3/rpi-titania-image-debug-raspberrypi3.rpi-sdimg.gz $CI_PROJECT_DIR/titania-arm-rpi-$(eval $VERSION)-dbg.img.gz

  cache:
    paths:
      - build/sstate-cache
      - build/downloads
  artifacts:
    paths:
      - titania-arm-rpi-*.img.gz
      - titania-arm-rpi-*.swu
    expire_in: 3 days

# TODO: add GPG signature step
#images:
#  stage: sign
#  script:
#    - for image in titania*.img.*; do md5sum $image > $image.md5sum ; done
#  artifacts:
#    paths:
#      - titania*.img.*.md5sum
#    expire_in: 3 days
