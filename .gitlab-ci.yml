image: gmacario/build-yocto

# TODO: remove the SSL variable afterwards
variables:
  GIT_SUBMODULE_STRATEGY: 'recursive'
  GIT_SSL_NO_VERIFY: 'true'
  BITBAKEDIR: '$CI_PROJECT_DIR/bitbake'
  IMAGE_DIR: '$CI_PROJECT_DIR/build/tmp-glibc/deploy/images'
  VERSION: 'git describe --long'
  COMPRESSION: 'xz'

# TODO:
# add stages:
# - build 2 versions in parallel (ARM and x86-64)
# - run a VM and security scan
# - deploy the image somewhere
stages:
  - setup
  - build
  - archive
  - sign
  # - publish 

bitbake:
  stage: setup
  script:
    - source openembedded-core/oe-init-build-env
    # # Add the layers
    - bitbake-layers add-layer ../meta-raspberrypi
    - bitbake-layers add-layer ../meta-oe/meta-oe
    - bitbake-layers add-layer ../meta-oe/meta-python
    - bitbake-layers add-layer ../meta-oe/meta-filesystems
    - bitbake-layers add-layer ../meta-oe/meta-networking
    - bitbake-layers add-layer ../meta-go
    - bitbake-layers add-layer ../meta-virtualization
    - bitbake-layers add-layer ../meta-titania

    # Making sure config locations point where we want them to
    - echo 'SSTATE_DIR = "${TOPDIR}/sstate-cache"' >> ./conf/local.conf
    - echo 'DL_DIR = "${TOPDIR}/downloads"' >> ./conf/local.conf
    - echo 'TMPDIR = "${TOPDIR}/tmp"' >> ./conf/local.conf
    - echo 'DISTRO = "titania"' >> ./conf/local.conf
  artifacts:
    paths:
      - build
    expire_in: 1 day

# TODO: use Titania image classes here
# TODO: make new branches start out with fresh cache
raspberry:
  stage: build
  script:
    - source openembedded-core/oe-init-build-env
    - MACHINE="raspberrypi3" bitbake rpi-basic-image
    - cp -H $IMAGE_DIR/raspberrypi3/rpi-basic-image-raspberrypi3.rpi-sdimg $CI_PROJECT_DIR/titania-arm-rpi-$(eval $VERSION).img
  cache:
    paths:
      - build/sstate-cache
      - build/downloads
  artifacts:
    paths:
      - titania-arm-rpi-*.img
    expire_in: 3 days

desktop:
  stage: build
  script:
    - source openembedded-core/oe-init-build-env
    # TODO: maybe other machine?
    # TODO: hard drive image, not partition image (stub because we use core-image-minimal for now)
    - MACHINE="qemux86-64" bitbake core-image-minimal
    - cp -H $IMAGE_DIR/qemux86-64/core-image-minimal-qemux86-64.ext4 $CI_PROJECT_DIR/titania-amd64-ext4-$(eval $VERSION).img
  cache:
    paths:
      - build/sstate-cache
      - build/downloads
  artifacts:
    paths:
      - titania-amd64-ext4-*.img
    expire_in: 3 days

compress:
  stage: archive
  script:
    - for image in titania*.img; do $COMPRESSION $image ; done
  artifacts:
    paths:
      - titania*.img.*
    expire_in: 3 days


# TODO: add GPG signature step
images:
  stage: sign
  script:
    - for image in titania*.img.*; do md5sum $image > $image.md5sum ; done
  artifacts:
    paths:
      - titania*.img.*.md5sum
    expire_in: 3 days
