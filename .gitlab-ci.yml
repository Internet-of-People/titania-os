image: gmacario/build-yocto

# TODO: remove the SSL variable afterwards
variables:
  GIT_SUBMODULE_STRATEGY: 'recursive'
  GIT_SSL_NO_VERIFY: 'true'
  BITBAKEDIR: '$CI_PROJECT_DIR/bitbake'
  IMAGE_DIR: '$CI_PROJECT_DIR/build/tmp-glibc/deploy/images'
  VERSION: 'git describe --long'
  # Insanity!
  COMPRESSION_OPTS: '-9e'
  COMPRESSION_CMD: 'xz'
  # TODO: decompression cmd

# TODO:
# add stages:
# - build 2 versions in parallel (ARM and x86-64)
# - run a VM and security scan
# - deploy the image somewhere
stages:
  - setup
  - build
  # - archive
  # - sign
  # - publish 

bitbake:
  stage: setup
  script:
    - source openembedded-core/oe-init-build-env
    # # Add the layers
    - bitbake-layers add-layer ../meta-raspberrypi
    - bitbake-layers add-layer ../meta-oe/meta-oe
    - bitbake-layers add-layer ../meta-oe/meta-python
    - bitbake-layers add-layer ../meta-oe/meta-filesystems
    - bitbake-layers add-layer ../meta-oe/meta-networking
    - bitbake-layers add-layer ../meta-oe/meta-python
    - bitbake-layers add-layer ../meta-go
    - bitbake-layers add-layer ../meta-virtualization
    - bitbake-layers add-layer ../meta-titania

    # Making sure config locations point where we want them to
    - echo 'SSTATE_DIR = "${TOPDIR}/sstate-cache"' >> ./conf/local.conf
    - echo 'DL_DIR = "${TOPDIR}/downloads"' >> ./conf/local.conf
    - echo 'TMPDIR = "${TOPDIR}/tmp"' >> ./conf/local.conf
    - echo 'DISTRO = "titania"' >> ./conf/local.conf
  artifacts:
    paths:
      - build
    expire_in: 1 day

# TODO: use Titania image classes here
# TODO: make new branches start out with fresh cache
raspberry:
  stage: build
  script:
    # Adding the SSH key TODO remove after we go public
    - eval $(ssh-agent)
    - echo $SSH_KEY_B64 | base64 -d | ssh-add -
    # Ensure we have the host key TODO insecure
    - mkdir ~/.ssh || true
    - ssh-keyscan -p 2200 gitlab.libertaria.community >> ~/.ssh/known_hosts
    - source openembedded-core/oe-init-build-env
    # Enable TITANIA_DEBUG variable to be passed directly without local.conf
    - export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE TITANIA_DEBUG"
    # TODO: schedule removal
    # Force datafs to be installed
    - MACHINE="raspberrypi3" bitbake -c install docker-prebuilt-datafs
    # Release image
    - MACHINE="raspberrypi3" bitbake rpi-titania-image
    - cp -H $IMAGE_DIR/raspberrypi3/rpi-titania-image-raspberrypi3.rpi-sdimg $CI_PROJECT_DIR/titania-arm-rpi-$(eval $VERSION).img
    - $COMPRESSION_CMD $COMPRESSION_OPTS $CI_PROJECT_DIR/titania-arm-rpi-$(eval $VERSION).img
    # Debug image
    # TODO: unify the call with above
    - TITANIA_DEBUG="true" MACHINE="raspberrypi3" bitbake rpi-titania-image
    - cp -H $IMAGE_DIR/raspberrypi3/rpi-titania-image-raspberrypi3.rpi-sdimg $CI_PROJECT_DIR/titania-arm-rpi-$(eval $VERSION)-debug.img
    - $COMPRESSION_CMD $COMPRESSION_OPTS $CI_PROJECT_DIR/titania-arm-rpi-$(eval $VERSION)-debug.img

  cache:
    paths:
      - build/sstate-cache
      - build/downloads
  artifacts:
    paths:
      - titania-arm-rpi-*.img.*
    expire_in: 3 days

# TODO: reenable aftewards

#desktop:
#  stage: build
#  script:
#    - source openembedded-core/oe-init-build-env
#    # TODO: maybe other machine?
#    # TODO: hard drive image, not partition image (stub because we use core-image-minimal for now)
#    - MACHINE="qemux86-64" bitbake core-image-minimal
#    - cp -H $IMAGE_DIR/qemux86-64/core-image-minimal-qemux86-64.ext4 $CI_PROJECT_DIR/titania-amd64-ext4-$(eval $VERSION).img
#  cache:
#    paths:
#      - build/sstate-cache
#      - build/downloads
#  artifacts:
#    paths:
#      - titania-amd64-ext4-*.img
#    expire_in: 3 days

#compress:
#  stage: archive
#  script:
#    - for image in titania*.img; do $COMPRESSION $image ; done
#  artifacts:
#    paths:
#      - titania*.img.*
#    expire_in: 3 days


# TODO: add GPG signature step
#images:
#  stage: sign
#  script:
#    - for image in titania*.img.*; do md5sum $image > $image.md5sum ; done
#  artifacts:
#    paths:
#      - titania*.img.*.md5sum
#    expire_in: 3 days
