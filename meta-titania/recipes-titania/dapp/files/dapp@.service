[Unit]
Wants=network.target
Wants=network-info.service

# Abort if either docker or dapphub fails
Requires=pydapphubfuse-reload.service
After=pydapphubfuse-reload.service
Requires=docker.service
After=docker.service

[Service]
Restart=always
# Prevent timeouting on image preload
# TODO: this logic has to be streamlined with dApp SDK
TimeoutStartSec=20min

# Prevent starting up rogue containers not in apps.json
ExecStartPre=/usr/bin/test -n ${DAPP_DOCKER_IMAGE}

# TODO: ugly hack, remove asap
# Both allowed to fail currently to play nicely with other dapps
ExecStartPre=-/bin/mkdir -p $DAPP_CHOWN_PATHS
ExecStartPre=-/bin/chown $DAPP_CHOWN_UID $DAPP_CHOWN_PATHS

# Preparatory steps, seen in status
ExecStartPre=/opt/titania/bin/dapp_load.sh ${DAPP_DOCKER_IMAGE_FILE}
ExecStartPre=/opt/titania/bin/dapp_pull.sh ${DAPP_DOCKER_IMAGE}
ExecStartPre=/opt/titania/bin/dapp_prepare.sh %i \
	$DAPP_DOCKER_PORTS \
	$DAPP_DOCKER_ENV \
    $DAPP_DOCKER_VOLUMES \
    ${DAPP_DOCKER_IMAGE}

# Run the container and attach for journal
ExecStart=/usr/bin/docker start -a -i %i
ExecStop=/usr/bin/docker stop %i
# Utility to create per-dapp http(s) forwards
ExecStartPost=/opt/titania/bin/dapp_register.sh start %i
ExecStopPost=/opt/titania/bin/dapp_register.sh stop %i

[Install]
WantedBy=multi-user.target